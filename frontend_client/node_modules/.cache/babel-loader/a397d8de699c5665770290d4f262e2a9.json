{"ast":null,"code":"var _jsxFileName = \"/Users/billnguyen/Documents/stripe_homework/frontend_client/src/CheckoutForm.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport './CheckoutForm.css';\nexport default function CheckoutForm() {\n  const [numPins, setNumPins] = useState(0);\n  const [succeeded, setSucceeded] = useState(false);\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState('');\n  const [disabled, setDisabled] = useState(true);\n  const [clientSecret, setClientSecret] = useState('');\n  const stripe = useStripe();\n  const elements = useElements();\n  useEffect(() => {\n    // Create PaymentIntent as soon as the page loads\n    window.fetch(\"/create-payment-intent\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        items: [{\n          \"numPins\": numPins\n        }]\n      })\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      setClientSecret(data.clientSecret);\n    });\n  }, []);\n  const cardStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: 'Arial, sans-serif',\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#32325d\"\n        }\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\"\n      }\n    }\n  };\n\n  const handleChange = async ev => {\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    setDisabled(ev.empty);\n    setError(ev.error ? ev.error.message : \"\");\n  };\n\n  const handleSubmit = async ev => {\n    const billingDetails = {\n      name: \"Test User\",\n      email: \"test@test.com\",\n      address: {\n        city: \"test city\",\n        line1: \"123 test street\",\n        state: \"OR\",\n        postal_code: \"97219\"\n      }\n    };\n    ev.preventDefault();\n    setProcessing(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: billingDetails\n      }\n    });\n\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      setError(null);\n      setProcessing(false);\n      setSucceeded(true);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    id: \"payment-form\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    name: \"numPins\",\n    onChange: numPins => setNumPins(numPins.value),\n    placeholder: \"GET YOUR PINS!\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, \"HELLO FOO\"), /*#__PURE__*/React.createElement(CardElement, {\n    id: \"card-element\",\n    options: cardStyle,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: processing || disabled || succeeded,\n    id: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    id: \"button-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, processing ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spinner\",\n    id: \"spinner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 21\n    }\n  }) : \"Pay\")), error && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-error\",\n    role: \"alert\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }, error), /*#__PURE__*/React.createElement(\"p\", {\n    className: succeeded ? \"result-message\" : \"result-message hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, \"Payment succeeded!\"));\n}","map":{"version":3,"sources":["/Users/billnguyen/Documents/stripe_homework/frontend_client/src/CheckoutForm.js"],"names":["React","useState","useEffect","CardElement","useStripe","useElements","CheckoutForm","numPins","setNumPins","succeeded","setSucceeded","error","setError","processing","setProcessing","disabled","setDisabled","clientSecret","setClientSecret","stripe","elements","window","fetch","method","headers","body","JSON","stringify","items","then","res","json","data","cardStyle","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","handleChange","ev","empty","message","handleSubmit","billingDetails","name","email","address","city","line1","state","postal_code","preventDefault","payload","confirmCardPayment","payment_method","card","getElement","billing_details","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  CardElement,\n  useStripe,\n  useElements\n} from \"@stripe/react-stripe-js\";\nimport './CheckoutForm.css';\n\n\nexport default function CheckoutForm() {\n    const [numPins, setNumPins] = useState(0)\n    const [succeeded, setSucceeded] = useState(false);\n    const [error, setError] = useState(null);\n    const [processing, setProcessing] = useState('');\n    const [disabled, setDisabled] = useState(true);\n    const [clientSecret, setClientSecret] = useState('');\n    const stripe = useStripe();\n    const elements = useElements();\n\n    useEffect(() => {\n        // Create PaymentIntent as soon as the page loads\n        window\n          .fetch(\"/create-payment-intent\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({items: [{ \"numPins\": numPins}]})\n          })\n          .then(res => {\n            return res.json();\n          })\n          .then(data => {\n            setClientSecret(data.clientSecret);\n          });\n      }, []);\n\n    const cardStyle = {\n        style: {\n          base: {\n            color: \"#32325d\",\n            fontFamily: 'Arial, sans-serif',\n            fontSmoothing: \"antialiased\",\n            fontSize: \"16px\",\n            \"::placeholder\": {\n              color: \"#32325d\"\n            }\n          },\n          invalid: {\n            color: \"#fa755a\",\n            iconColor: \"#fa755a\"\n          }\n        }\n      };\n\n    const handleChange = async ev => {\n      // Listen for changes in the CardElement\n      // and display any errors as the customer types their card details\n      setDisabled(ev.empty);\n      setError(ev.error ? ev.error.message : \"\");\n    };\n\n    const handleSubmit = async ev => {\n      const billingDetails = {\n        name: \"Test User\",\n        email: \"test@test.com\",\n        address: {\n          city: \"test city\",\n          line1: \"123 test street\",\n          state: \"OR\",\n          postal_code: \"97219\"\n        }\n\n\n      };\n\n      ev.preventDefault();\n      setProcessing(true);\n      const payload = await stripe.confirmCardPayment(clientSecret, {\n        payment_method: {\n          card: elements.getElement(CardElement),\n          billing_details: billingDetails\n        }\n      });\n      if (payload.error) {\n        setError(`Payment failed ${payload.error.message}`);\n        setProcessing(false);\n      } else {\n        setError(null);\n        setProcessing(false);\n        setSucceeded(true);\n      }\n    };\n\n    return (\n      <form id=\"payment-form\" onSubmit={handleSubmit}>\n        <input \n          type=\"number\"\n          name=\"numPins\"\n          onChange={(numPins) => setNumPins(numPins.value)}\n          placeholder=\"GET YOUR PINS!\"\n        />\n\n        <p/>\n\n        <p>HELLO FOO</p>\n          \n        <CardElement id=\"card-element\" options={cardStyle} onChange={handleChange} />\n        <button\n            disabled={processing || disabled || succeeded}\n            id=\"submit\">\n            <span id=\"button-text\">\n                {processing ? (\n                    <div className=\"spinner\" id=\"spinner\"></div>\n                ) : (\n                    \"Pay\"\n                )}\n            </span>\n        </button>\n        \n        {/* Show any error that happens when processing the payment */}\n        {error && (\n            <div className=\"card-error\" role=\"alert\">\n        {error}\n        </div>)}\n\n        {/* Show a success message upon completion */}\n        <p className={succeeded ? \"result-message\" : \"result-message hidden\"}>\n          Payment succeeded!\n        </p>\n      </form>\n    );\n}"]},"metadata":{},"sourceType":"module"}